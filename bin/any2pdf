#!/usr/bin/env ruby

require 'pdfkit'
require 'trollop'
require 'fileutils'
require 'nokogiri'
require 'uri'
require 'zlog'

opts = Trollop::options do
  banner "usage: any2pdf <file>"
  opt :verbose, "be verbose"
  opt :debug, "provides debugging infos"
  opt :output, "output file", :default => ""
  opt :stylesheet, "stylesheet to load", :default => ""
  opt :input, "input file", :default => ""
  opt :landscape, "if you want landscape instead of portrait"
  opt :view_cmd, "command used for viewing", :default => "v %s"
  opt :view, "what to view (pdf|html|none)", :default => "pdf"
  opt :renderer, "what engine to use for pdf creation (pdfkit|xelatex)", default: "pdfkit", type: :string
  opt :toc, "generate a table of contents"
  opt :toc_level, "which depth if headings to include in ToC", :default => 2, :type => :int
  opt :numbering, "whether to add numbering to all headings"
  opt :embed, "when active embed js/css files instad of just linking to them"
end

Zlog::level = Zlog::VERBOSE if opts[:verbose]
Zlog::level = Zlog::DEBUG if opts[:debug]

# sanity checks
Trollop::die :toc_level, "must not be lower than 1" if opts[:toc_level] < 1
Trollop::die :toc_level, "must not be higher than 6" if opts[:toc_level] > 6

mdfile = ARGV.first
Trollop::die :input, "must be supplied" if mdfile.nil?
Trollop::die :input, "#{mdfile} must exist" if not File::exists?(mdfile)

def get_existing( f )
  path = File::expand_path(f)
  return path if File::exists?(path)
  return nil
end

def get_style( stylename, type = "css" )
  rel_path = File.expand_path('../Gemfile/../data', File.dirname(__FILE__))

  if not stylename.nil? and not stylename.empty?
    a =
      get_existing(stylename) ||
      get_existing("#{rel_path}/#{stylename}.#{type}") ||
      get_existing("#{rel_path}/#{stylename}")
    return a if not a.nil?
    Zlog.warning "couldn't find stylesheet #{stylename}. Trying default.\n"
  end

  # try default, if the user supplied crap...
  a = get_existing("#{rel_path}/default.#{type}")
  return a if not a.nil?
  Zlog.error "Couldn't find internal stylesheet in #{rel_path}/default.#{type}. Something is seriously wrong! try reinstalling?\n"
  ""
end

def embed_html( raw, source )
  begin
    require 'websnap'
    require 'em-synchrony'
    w = WebSnap.new( nil, nil )

    # parse raw html contents
    Zlog::info "embedding html via websnap"
    h = Nokogiri::HTML(raw)

    # embed all parts into the html
    EM::synchrony do
      w.spiderHtmlElements( 'file://'+File::expand_path(File::dirname(source)), h )
      EM.stop
    end

    # return the resulting html as string
    h.to_s
  rescue LoadError
    return raw
  end
end

def md2html(file, opts, stylefile)
  return nil if not file.end_with?(".md")
  htmlfile = file.sub(/.md$/,".html")
  htmlfile_raw = htmlfile+".raw.html"

  rel_path = File.expand_path('../Gemfile/../data', File.dirname(__FILE__))

  # prep-work for including style and script
  style_e = lambda{|f,o| "<style type=\"text/css\" #{o}>\n#{File::read(f)}\n</style>" }
  style_l = lambda{|f,o| "<link rel=\"stylesheet\" href=\"#{f}\" #{o} />" }
  script_e = lambda{|f,o| "<script #{o}>\n#{File::read(f)}\n</script>" }
  script_l = lambda{|f,o| "<script src=\"#{f}\" #{o} ></script>"}
  style = opts[:embed] ? style_e : style_l
  script = opts[:embed] ? script_e : script_l

  # get all fields in the heading
  raw_heading = [
    # start with stylesheets
    style.( rel_path+"/boilerplate.css", ''),
    style.( File::expand_path(stylefile), '' ),
    style.( rel_path+"/print.css", 'media="print"'),
    script.( rel_path+"/jquery-1.9.0.min.js", '' ),
    ( opts[:toc] ? script.( rel_path+"/toc_generator.js", '' ) : '' )
    ].join("\n\n")

  # create the html
  `pandoc "#{file}" -o "#{htmlfile_raw}"`
  raw_html = File::read htmlfile_raw
  FileUtils::rm_rf htmlfile_raw

  # additional options
  toc_level = opts[:toc_level]
  number_headings = (opts[:numbering] == true)

  # actually create the result file
  renderer = ERB.new(File::read(rel_path + "/template.html.erb"))
  html = embed_html( renderer.result(binding), file )
  
  # save the html to file
  File::write htmlfile, html
  htmlfile
end

def pdfkit_html2pdf( file, outfile, opts )
  styles = []
  styles << opts.stylesheet

  # find css files
  dom = Nokogiri::parse( File::open(file).read() )
  dom.css("link").each do |e| 
    styles << e.attr("href")
  end

  # update the html links to make sure that local links (relative) work
  ( dom.css("@src") + dom.css("@href") ).
    find_all{|src| (src.value =~ URI::regexp) == nil }.
    each{|src| src.value = File::expand_path(src.value) }

  options = {
    footer_right:   "[page]/[topage]",
    orientation:    (( opts[:landscape] ) ? "landscape" : "portrait" ),
    page_size:      'A4',
  }
  html = dom.to_s
  kit = PDFKit.new(html, options)
  
  styles.compact.each do |style| 
    kit.stylesheets << style if File::exists?(style)
  end

  kit.to_file(outfile)
end

def xelatex_html2pdf( file, outfile, opts )
  puts outfile
  texfile = "#{outfile}".sub(/[.]pdf$/, '.tex')

  cmd = "pandoc \"#{file}\" --listings -o \"#{texfile}\""
  Zlog::debug "convert html to tex: #{cmd}"
  `#{cmd}`

  verb_opts = "mathescape,
               linenos,
               numbersep=5pt,
               frame=single,
               framesep=1mm,
               bgcolor=colorcode_bg".gsub("\n",'')

  tex = File::read(texfile).
    # all verbatim stuff is in lstlistings like this:
    # \begin{lstlisting}[language=bash]
    # convert it to minted
    gsub(/\\begin{lstlisting}\[language=([^\]]*)\]/){'\begin{minted}['+verb_opts+']{'+$1+'}'}.
    gsub(/\\begin{lstlisting}/, '\begin{minted}['+verb_opts+']{bash}').
    gsub(/\\lstinline(.)(.*?)\1/){ '\colorbox{colorcode_bg}{\lstinline'+$1+$2+$1+'}' }.
    gsub(/\\end{lstlisting}/, '\end{minted}')

  tex_style = get_style( opts[:stylesheet], 'tex' )
  File::write texfile, File::read(tex_style).sub(/CONTENT/, tex)

  cmd = "xelatex -shell-escape \"#{texfile}\""
  Zlog::debug "convert tex to pdf: #{cmd}"
  `#{cmd}`
end

def html2pdf(file, opts)
  Zlog.debug "running html2pdf on '#{file}'"
  return nil if not file.end_with?(".html")
  pdffile = file.sub(/.html$/,".pdf")
  pdffile = opts.output if not opts.output.nil? and not opts.output.empty?
  Zlog.debug "output pdf will be '#{pdffile}'"

  case opts[:renderer]
  when 'pdfkit'
    pdfkit_html2pdf file, pdffile, opts
  when 'xelatex'
    xelatex_html2pdf file, pdffile, opts
  else
    Zlog::abort "Can't find renderer '#{opts[:renderer]}'. Please use a supported renderer!"
  end

  pdffile
end

style = get_style( opts[:stylesheet] )
Zlog.info "using stylesheet: #{style}\n"
htmlfile = md2html(mdfile, opts, style)
Zlog.warn "ww input was not an md-file, trying to convert it as html..." if htmlfile.nil?
Zlog.ok "htmlfile: #{htmlfile}\n" if not htmlfile.nil?
pdffile = html2pdf(mdfile, opts) || html2pdf(htmlfile, opts)
Zlog.abort "couldn't convert file from html to pdf..." if pdffile.nil?
Zlog.ok "output: #{pdffile}\n" if not pdffile.nil?

cmd = ""
case opts[:view]
when "pdf"
  cmd = opts[:view_cmd] % [ '"'+pdffile+'"' ]
when "html"
  cmd = opts[:view_cmd] % [ '"'+htmlfile+'"' ]
when "none"
else
  Zlog.warn "don't know '#{opts[:view]}' to view\n"
end

if not cmd.empty?
  Zlog.info "view with: '#{cmd}'"
  system cmd
end
