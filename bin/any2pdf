#!/usr/bin/env ruby

require 'trollop'
require 'zlog'
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'any2pdf'

opts = Trollop::options do
  banner "usage: any2pdf <file>"
  opt :verbose, "be verbose"
  opt :debug, "provides debugging infos"
  opt :output, "output file", :default => ""
  opt :stylesheet, "stylesheet to load", :default => ""
  opt :input, "input file", :default => ""
  opt :landscape, "if you want landscape instead of portrait"
  opt :gitinfo, "if you want to add the current commit ID, date, and tag"
  opt :view_cmd, "command used for viewing", :default => "v %s"
  opt :view, "what to view (pdf|html|none)", :default => "none"
  opt :renderer, "what engine to use for pdf creation (pdfkit|xelatex)", default: "pdfkit", type: :string
  opt :toc, "generate a table of contents"
  opt :toc_level, "which depth if headings to include in ToC", :default => 2, :type => :int
  opt :numbering, "whether to add numbering to all headings"
  opt :embed, "when active embed js/css files instad of just linking to them"
  opt :clean, "clean up when done"
end

Zlog.init_stdout loglevel: :warn    if not opts[:verbose] and not opts[:debug]
Zlog.init_stdout loglevel: :info    if opts[:verbose]
Zlog.init_stdout loglevel: :debug   if opts[:debug]
Log = Logging.logger['any2pdf']

# sanity checks
Trollop::die :toc_level, "must not be lower than 1" if opts[:toc_level] < 1
Trollop::die :toc_level, "must not be higher than 6" if opts[:toc_level] > 6

mdfile = ARGV.first
Trollop::die :input, "must be supplied" if mdfile.nil?
Trollop::die :input, "#{mdfile} must exist" if not File::exists?(mdfile)
htmlfile = mdfile.sub(/.md$/,".html")
tmpmdfile = ".~" + mdfile

any2pdf = Any2Pdf.new

# Metadata
mdfile = any2pdf.fill_in_metadata(mdfile, tmpmdfile) if opts[:gitinfo]

# Stylesheet
style = any2pdf.get_style( opts[:stylesheet] )
Log.info "using stylesheet: #{style}\n"

# HTML
htmlfile = any2pdf.md2html(mdfile, htmlfile, opts, style)
Log.warn "ww input was not an md-file, trying to convert it to pdf as html..." if htmlfile.nil?
Log.ok "htmlfile: #{htmlfile}\n" if not htmlfile.nil?

# PDF
pdffile = any2pdf.html2pdf(mdfile, opts) || any2pdf.html2pdf(htmlfile, opts)
Log.abort "couldn't convert file from html to pdf..." if pdffile.nil?
Log.ok "output: #{pdffile}\n" if not pdffile.nil?

cmd = ""
case opts[:view]
when "pdf"
  cmd = opts[:view_cmd] % [ '"'+pdffile+'"' ]
when "html"
  cmd = opts[:view_cmd] % [ '"'+htmlfile+'"' ]
when "none"
else
  Log.warn "don't know '#{opts[:view]}' to view\n"
end

if not cmd.empty?
  Log.info "view with: '#{cmd}'"
  system cmd
end

if opts[:clean]
  File::delete( tmpmdfile ) if File::file? tmpmdfile
  File::delete( htmlfile ) if File::file? htmlfile
end